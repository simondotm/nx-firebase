const path = require("path")
const fs = require("fs")

const packageJson = require('../package.json')
const nvmVersion = fs.readFileSync(path.join(__dirname, '..', '.nvmrc'), 'utf8')
const nodeVersion = parseInt(nvmVersion.trim().split('.')[0])

const file = path.join(__dirname, '..', 'packages', 'nx-firebase', 'src', '__generated__', 'nx-firebase-versions.ts')

const packageVersions = {
  'nx': packageJson.devDependencies['nx'],
  'firebase': packageJson.devDependencies['firebase'],
  'firebase-admin': packageJson.devDependencies['firebase-admin'],
  'firebase-functions': packageJson.devDependencies['firebase-functions'],
  'firebase-functions-test': packageJson.devDependencies['firebase-functions-test'],
  'firebase-tools': packageJson.devDependencies['firebase-tools'],
  'kill-port': packageJson.devDependencies['kill-port'],
  'node': nodeVersion,
}

const data = `
//------------------------------------------------------------------------------
// This file is automatically generated by tools/generate-package-versions.js
// Do not edit this file manually
//------------------------------------------------------------------------------
export const packageVersions = ${JSON.stringify(packageVersions, null, 2)}

export type PackageVersions = typeof packageVersions
`


function ensureDirectoryExistence(filePath) {
  const dirname = path.dirname(filePath);
  if (fs.existsSync(dirname)) {
    return true;
  }
  ensureDirectoryExistence(dirname);
  fs.mkdirSync(dirname);
}

console.log(`Writing package versions to '${file}'`)


ensureDirectoryExistence(file)
fs.writeFileSync(file, data)



