const path = require('path')
const fs = require('fs')

const packageJson = require('../package.json')
const nxVersion = packageJson.devDependencies['nx']
const nxMajorVersion = parseInt(nxVersion.split('.')[0])

// // read node version from .nvmrc
// const nvmVersion = fs.readFileSync(path.join(__dirname, '..', '.nvmrc'), 'utf8')
// const nodeVersion = nvmVersion.trim().split('.')[0]

// default firebase node version is to be derived from Nx version for now
// Nx 17+ offically suports Node 18, so may as well use that pattern
const nodeVersion = nxMajorVersion >= 17 ? '18' : '16'

function ensureDirectoryExistence(filePath) {
  const dirname = path.dirname(filePath)
  if (fs.existsSync(dirname)) {
    return true
  }
  ensureDirectoryExistence(dirname)
  fs.mkdirSync(dirname)
}


function shouldUpdateFile(file, data) {
  if (!fs.existsSync(file)) {
    return true
  }
  const existingData = fs.readFileSync(file, 'utf8')
  return existingData !== data
}

function maybeUpdateFile(file, data) {
  if (shouldUpdateFile(file, data)) {
    console.log(`Updating '${file}'`)
    fs.writeFileSync(file, data)
  }
}

function updateVersions() {
  const generatedFile = path.join(
    __dirname,
    '..',
    'packages',
    'nx-firebase',
    'src',
    '__generated__',
    'nx-firebase-versions.ts',
  )

  // strip out the ^ and ~ from the versions
  for (const [key, value] of Object.entries(packageJson.devDependencies)) {
    packageJson.devDependencies[key] = value.replace('^', '').replace('~', '')
  }

  const data = `//------------------------------------------------------------------------------
// This file is automatically generated by tools/generate-package-versions.js
// Do not edit this file manually
//------------------------------------------------------------------------------
export const packageVersions = {
  nx: '${nxVersion}',
  firebase: '${packageJson.devDependencies['firebase']}',
  firebaseAdmin: '${packageJson.devDependencies['firebase-admin']}',
  firebaseFunctions: '${packageJson.devDependencies['firebase-functions']}',
  firebaseFunctionsTest: '${packageJson.devDependencies['firebase-functions-test']}',
  firebaseTools: '${packageJson.devDependencies['firebase-tools']}',
  killPort: '${packageJson.devDependencies['kill-port']}',
  nodeEngine: '${nodeVersion}',
  googleCloudFunctionsFramework: '${packageJson.devDependencies['@google-cloud/functions-framework']}',
}
`
  ensureDirectoryExistence(generatedFile)
  maybeUpdateFile(generatedFile, data)
}

function updateTemplates() {
  const pluginSrcDir = path.join(__dirname, '..', 'packages', 'nx-firebase', 'src', 'generators')
  const firebaseTemplatesDir = path.join(__dirname, '..', 'node_modules', 'firebase-tools', 'templates', 'init' )

  const templates = [
    [ path.join(firebaseTemplatesDir, 'hosting', 'index.html'), path.join(pluginSrcDir, 'application', 'files', 'public', 'index.html')],
    [ path.join(firebaseTemplatesDir, 'hosting', '404.html'), path.join(pluginSrcDir, 'application', 'files', 'public', '404.html')],
    [ path.join(firebaseTemplatesDir, 'firestore', 'firestore.indexes.json'), path.join(pluginSrcDir, 'application', 'files', 'firestore.indexes.json')],
    [ path.join(firebaseTemplatesDir, 'firestore', 'firestore.rules'), path.join(pluginSrcDir, 'application', 'files', 'firestore.rules')],
    [ path.join(firebaseTemplatesDir, 'storage', 'storage.rules'), path.join(pluginSrcDir, 'application', 'files', 'storage.rules')],
    [ path.join(firebaseTemplatesDir, 'functions', 'typescript', 'index.ts'), path.join(pluginSrcDir, 'function', 'files', 'src', 'main.ts__tmpl__')],
  ]

  for (const [src, dest] of templates) {
    let data = fs.readFileSync(src, 'utf8')
    if (src.includes('index.html')){
      data = data.replaceAll('{{VERSION}}', packageJson.devDependencies['firebase'])
    }    
    if (src.includes('firestore.rules')){
      data = data.replaceAll('{{IN_30_DAYS}}', '<%= IN_30_DAYS %>')
    }
    maybeUpdateFile(dest, data)
  }
}

updateVersions()
updateTemplates()
